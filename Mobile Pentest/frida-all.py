
from __future__ import print_function
import threading
import base64
import frida
from frida_tools.application import Reactor
from argparse import ArgumentParser

class Application(object):

    def __init__(self, target):
        
        self.target = target
        
        self._stop_requested = threading.Event()
        self._reactor = Reactor(run_until_return=lambda reactor: self._stop_requested.wait())

        self._device = frida.get_device_manager().enumerate_devices()[-1]
        self._device.enable_spawn_gating()
        self._sessions = set()
        self._device.on("spawn-added", lambda child: self._reactor.schedule(lambda: self._on_child_added(child)))
        self._device.on("spawn-removed", lambda child: self._reactor.schedule(lambda: self._on_child_removed(child)))
        self._device.on("child-added", lambda child: self._reactor.schedule(lambda: self._on_child_added(child)))
        self._device.on("child-removed", lambda child: self._reactor.schedule(lambda: self._on_child_removed(child)))
        self._device.on("output", lambda pid, fd, data: self._reactor.schedule(lambda: self._on_output(pid, fd, data)))

    def run(self):
        
        self._reactor.schedule(lambda: self._start())
        self._reactor.run()

    def _start(self):
        
        pid = self._device.spawn(self.target)
        self._instrument(pid)

    def _stop_if_idle(self):
        
        if len(self._sessions) == 0:
            self._stop_requested.set()

    def _instrument(self, pid):
        
        try:
            
            print("✔ attach(pid={})".format(pid))
            session = self._device.attach(pid)
            session.on("detached", lambda reason: self._reactor.schedule(lambda: self._on_detached(pid, session, reason)))
            print("✔ enable_child_gating()")
            session.enable_child_gating()
            print("✔ create_script()")
            script_bypass = session.create_script(base64.b64decode("").decode('utf-8'))
            print("✔ Bypass all")
            script_bypass.load()
            
            js_script = base64.b64decode("SW50ZXJjZXB0b3IuYXR0YWNoKE1vZHVsZS5maW5kRXhwb3J0QnlOYW1lKG51bGwsICJwdHJhY2UiKSwgewogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygicHRyYWNlIGNhbGxlZCEiKTsKICAgICAgICBzZW5kKCJwdHJhY2UiKTsKICAgICAgICAvL2NvbnNvbGUubG9nKGFyZ3MpOwogICAgfQp9KTsKCkludGVyY2VwdG9yLmF0dGFjaChNb2R1bGUuZmluZEV4cG9ydEJ5TmFtZShudWxsLCAiZXhpdCIpLCB7CiAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgewogICAgICAgIGNvbnNvbGUubG9nKCJleGl0IGNhbGxlZCEiKTsKICAgICAgICBzZW5kKCJleGl0Iik7CiAgICAgICAgLy9jb25zb2xlLmxvZyhhcmdzKTsKICAgIH0KfSk7CgpJbnRlcmNlcHRvci5hdHRhY2goTW9kdWxlLmZpbmRFeHBvcnRCeU5hbWUobnVsbCwgImFib3J0IiksIHsKICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7CiAgICAgICAgY29uc29sZS5sb2coImFib3J0IGNhbGxlZCEiKTsKICAgICAgICBzZW5kKCJhYm9ydCIpOwogICAgICAgIC8vY29uc29sZS5sb2coYXJncyk7CiAgICB9Cn0pOwoKSW50ZXJjZXB0b3IuYXR0YWNoKE1vZHVsZS5maW5kRXhwb3J0QnlOYW1lKG51bGwsICJmb3JrIiksIHsKICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7CiAgICAgICAgY29uc29sZS5sb2coImZvcmsgY2FsbGVkISIpOwogICAgICAgIHNlbmQoImZvcmsiKTsKICAgICAgICAvL2NvbnNvbGUubG9nKGFyZ3MpOwogICAgfQp9KTsKCkludGVyY2VwdG9yLmF0dGFjaChNb2R1bGUuZmluZEV4cG9ydEJ5TmFtZShudWxsLCAidmZvcmsiKSwgewogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygidmZvcmsgY2FsbGVkISIpOwogICAgICAgIHNlbmQoInZmb3JrIik7CiAgICAgICAgLy9jb25zb2xlLmxvZyhhcmdzKTsKICAgIH0KfSk7CgpJbnRlcmNlcHRvci5hdHRhY2goTW9kdWxlLmZpbmRFeHBvcnRCeU5hbWUobnVsbCwgIl9lbmQiKSwgewogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygiZm9yayBjYWxsZWQhIik7CiAgICAgICAgc2VuZCgiZm9yayIpOwogICAgICAgIC8vY29uc29sZS5sb2coYXJncyk7CiAgICB9Cn0pOwoKSW50ZXJjZXB0b3IuYXR0YWNoKE1vZHVsZS5maW5kRXhwb3J0QnlOYW1lKG51bGwsICJfZXhpdCIpLCB7CiAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgewogICAgICAgIGNvbnNvbGUubG9nKCJfZXhpdCBjYWxsZWQhIik7CiAgICAgICAgc2VuZCgiX2V4aXQiKTsKICAgICAgICAvL2NvbnNvbGUubG9nKGFyZ3MpOwogICAgfQp9KTsKCkludGVyY2VwdG9yLnJlcGxhY2UoTW9kdWxlLmZpbmRFeHBvcnRCeU5hbWUobnVsbCwgImtpbGwiKSwgbmV3IE5hdGl2ZUNhbGxiYWNrKGZ1bmN0aW9uKHBpZCwgc2lnKXsKICAgIGNvbnNvbGUubG9nKCJUcmllZCB0byBraWxsIHBpZDoiLHBpZCwic2lnOiIsc2lnKTsKICAgIHNlbmQoImtpbGwgc2VudCIpCiAgICByZXR1cm4gMDsKfSwnaW50JyxbJ2ludCcsJ2ludCddKSk7CgpzZW5kKCJTdGFydGVkIHNoaXQgaW4gdGhpcyBwaWQiKTsKCkphdmEucGVyZm9ybShmdW5jdGlvbigpIHsKICAgIGNvbnNvbGUubG9nKCIiKTsKICAgIGNvbnNvbGUubG9nKCJbLl0gRGVidWcgY2hlY2sgYnlwYXNzIik7CgogICAgdmFyIERlYnVnID0gSmF2YS51c2UoJ2FuZHJvaWQub3MuRGVidWcnKTsKICAgIERlYnVnLmlzRGVidWdnZXJDb25uZWN0ZWQuaW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zb2xlLmxvZygnaXNEZWJ1Z2dlckNvbm5lY3RlZCBCeXBhc3NlZCAhJyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHZhciBwcm9jZXNzID0gSmF2YS51c2UoJ2FuZHJvaWQub3MuUHJvY2VzcycpOwogICAgcHJvY2Vzcy5raWxsUHJvY2Vzcy5vdmVybG9hZCgnaW50JykuaW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbihwaWQpIHsKICAgICAgICBjb25zb2xlLmxvZygnU2hpdCBoYXBwZW5zIGtpbGxwcm9jZXNzJyxwaWQpOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgc3lzdGVtID0gSmF2YS51c2UoJ2phdmEubGFuZy5TeXN0ZW0nKTsKICAgIHN5c3RlbS5leGl0Lm92ZXJsb2FkKCdpbnQnKS5pbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uIChwaWQpIHsKICAgICAgICBjb25zb2xlLmxvZygnRXhpdCBjYWxsZWQhJyk7CiAgICAgICAgc2VuZCgic3lzdGVtLmV4aXQiKQogICAgfQoKICAgIHZhciBydW50aW1lID0gSmF2YS51c2UoJ2phdmEubGFuZy5SdW50aW1lJyk7CiAgICBydW50aW1lLmhhbHQub3ZlcmxvYWQoJ2ludCcpLmltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24odmFyXzApIHsKICAgICAgICBjb25zb2xlLmxvZygnaGFsdCBjYWxsZWQnKTsKICAgICAgICBzZW5kKCdoYWx0IGNhbGxlZCcpOwogICAgfQp9KTs=").decode('utf-8')
            script = session.create_script(js_script, runtime='v8')
            script.on("message", lambda message, data: self._reactor.schedule(lambda: self._on_message(pid, message)))
            print("✔ load()")
            script.load()

            js_script_open = base64.b64decode("SW50ZXJjZXB0b3IuYXR0YWNoKE1vZHVsZS5maW5kRXhwb3J0QnlOYW1lKG51bGwsICdvcGVuJyksIHsKICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgewogICAgc2VuZCh7CiAgICAgIHR5cGU6ICdvcGVuJywKICAgICAgcGF0aDogTWVtb3J5LnJlYWRVdGY4U3RyaW5nKGFyZ3NbMF0pCiAgICB9KTsKICB9Cn0pOw==").decode("utf-8")
            script_spawn = session.create_script(js_script_open)
            script_spawn.on("message", lambda message, data:
                self._reactor.schedule(
                    lambda: self._on_message(pid, message)))
            print("✔ load()")
            script_spawn.load()

            print("✔ resume(pid={})".format(pid))
            self._device.resume(pid)
            self._sessions.add(session)
            
        except Exception as e:
            
            print(e)
            print("Something's wrong! resuming...")
            self._device.resume(pid)
            

    def _on_child_added(self, child):
        
        print("⚡ child_added: {}".format(child))
        
        if child.origin == 'exec':
            
            print('not instrumenting exec shit')
            self._device.resume(child.pid)
            return
        
        #if child.path != self.target and child.origin != 'fork':
            #print("Not instrumenting cause name is not expected.")
            #return
            
        self._instrument(child.pid)

    def _on_child_removed(self, child):
        
        print("⚡ child_removed: {}".format(child))

    def _on_output(self, pid, fd, data):
        
        print("⚡ output: pid={}, fd={}, data={}".format(pid, fd, repr(data)))

    def _on_detached(self, pid, session, reason):
        
        print("⚡ detached: pid={}, reason='{}'".format(pid, reason))
        self._sessions.remove(session)
        self._reactor.schedule(self._stop_if_idle, delay=0.5)

    def _on_message(self, pid, message):
        
        try:
            
            print("⚡ message: pid={}, payload={}".format(pid, message["payload"]))
            
        except:
            
            print(message)

if __name__ == "__main__":
    
    # Change Package Name
    target = "com.package"
    app = Application(target)
    app.run()
